{"ast":null,"code":"import _classCallCheck from \"/Users/kaka/Desktop/my-expenses/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kaka/Desktop/my-expenses/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kaka/Desktop/my-expenses/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kaka/Desktop/my-expenses/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kaka/Desktop/my-expenses/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kaka/Desktop/my-expenses/web/src/views/app/categories/browseAll/AddNewModal.js\";\nimport React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport IntlMessages from \"../../../../helpers/IntlMessages\";\nimport { NotificationManager } from \"../../../../components/common/react-notifications\";\nimport { createCategory } from \"../../../../helpers/Server/Category\";\nimport { createCategoryAsync } from \"../../../../redux/actions\";\n\nvar AddNewModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddNewModal, _Component);\n\n  function AddNewModal(props) {\n    var _this;\n\n    _classCallCheck(this, AddNewModal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddNewModal).call(this, props));\n\n    _this.handleNameChange = function (event) {\n      _this.setState({\n        name: event.target.value\n      });\n    };\n\n    _this.handleDescriptionChange = function (event) {\n      _this.setState({\n        description: event.target.value\n      });\n    };\n\n    _this.setLoading = function (isLoading) {\n      _this.setState({\n        loading: isLoading\n      });\n    };\n\n    _this.handleSubmit = function () {\n      if (_this.isValidInput()) {\n        if (!_this.state.loading) {\n          _this.props.toggleModal();\n\n          var categoryInfo = {\n            name: _this.state.name\n          };\n\n          _this.setLoading(true);\n\n          var serverCall = function serverCall() {\n            return createCategory(categoryInfo);\n          };\n\n          _this.props.createCategoryAsync(serverCall, function () {\n            _this.setLoading(false);\n          }, function (succeed, message) {\n            _this.setLoading(false);\n\n            if (succeed) {\n              NotificationManager.success(message, \"Success\", 3000, null, null, \"\");\n            } else {\n              NotificationManager.error(message, \"Create Category Fail\", 3000, null, null, \"\");\n            }\n          });\n        }\n      }\n    };\n\n    _this.state = {\n      name: \"\",\n      description: \"\",\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(AddNewModal, [{\n    key: \"isValidInput\",\n    value: function isValidInput() {\n      if (!this.state.name) {\n        NotificationManager.warning(\"Please enter a category name.\", \"Invalid input\", 3000, null, null, \"\");\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          modalOpen = _this$props.modalOpen,\n          toggleModal = _this$props.toggleModal;\n      return React.createElement(Modal, {\n        isOpen: modalOpen,\n        toggle: toggleModal,\n        updateCategories: update,\n        wrapClassName: \"modal-right\",\n        backdrop: \"static\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"categories.add-new-category\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"categories.name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(Input, {\n        onChange: this.handleNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Label, {\n        className: \"mt-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"categories.description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(Input, {\n        type: \"textarea\",\n        onChange: this.handleDescriptionChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        outline: true,\n        onClick: toggleModal,\n        className: \"btn-shadow btn-multiple-state \".concat(this.state.loading ? \"show-spinner\" : \"\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"genaral.cancel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"spinner d-inline-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"bounce1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"bounce2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"bounce3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"general.submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }))), \" \"));\n    }\n  }]);\n\n  return AddNewModal;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    categories: state.category.categories\n  };\n};\n\nexport default connect(mapStateToProps, {\n  createCategoryAsync: createCategoryAsync\n})(AddNewModal);","map":{"version":3,"sources":["/Users/kaka/Desktop/my-expenses/web/src/views/app/categories/browseAll/AddNewModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","ModalFooter","Input","Label","connect","IntlMessages","NotificationManager","createCategory","createCategoryAsync","AddNewModal","props","handleNameChange","event","setState","name","target","value","handleDescriptionChange","description","setLoading","isLoading","loading","handleSubmit","isValidInput","state","toggleModal","categoryInfo","serverCall","succeed","message","success","error","warning","modalOpen","update","mapStateToProps","categories","category"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Label\n} from \"reactstrap\";\nimport { connect } from \"react-redux\";\n\nimport IntlMessages from \"../../../../helpers/IntlMessages\";\nimport { NotificationManager } from \"../../../../components/common/react-notifications\";\nimport { createCategory } from \"../../../../helpers/Server/Category\";\nimport { createCategoryAsync } from \"../../../../redux/actions\";\n\nclass AddNewModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      description: \"\",\n      loading: false\n    };\n  }\n\n  handleNameChange = event => {\n    this.setState({ name: event.target.value });\n  };\n\n  handleDescriptionChange = event => {\n    this.setState({ description: event.target.value });\n  };\n\n  setLoading = isLoading => {\n    this.setState({ loading: isLoading });\n  };\n\n  isValidInput() {\n    if (!this.state.name) {\n      NotificationManager.warning(\n        \"Please enter a category name.\",\n        \"Invalid input\",\n        3000,\n        null,\n        null,\n        \"\"\n      );\n      return false;\n    }\n    return true;\n  }\n\n  handleSubmit = () => {\n    if (this.isValidInput()) {\n      if (!this.state.loading) {\n        this.props.toggleModal();\n        const categoryInfo = {\n          name: this.state.name\n        };\n        this.setLoading(true);\n        const serverCall = () => createCategory(categoryInfo);\n        this.props.createCategoryAsync(\n          serverCall,\n          () => {\n            this.setLoading(false);\n          },\n          (succeed, message) => {\n            this.setLoading(false);\n            if (succeed) {\n              NotificationManager.success(\n                message,\n                \"Success\",\n                3000,\n                null,\n                null,\n                \"\"\n              );\n            } else {\n              NotificationManager.error(\n                message,\n                \"Create Category Fail\",\n                3000,\n                null,\n                null,\n                \"\"\n              );\n            }\n          }\n        );\n      }\n    }\n  };\n\n  render() {\n    const { modalOpen, toggleModal } = this.props;\n    return (\n      <Modal\n        isOpen={modalOpen}\n        toggle={toggleModal}\n        updateCategories={update}\n        wrapClassName=\"modal-right\"\n        backdrop=\"static\"\n      >\n        <ModalHeader toggle={toggleModal}>\n          <IntlMessages id=\"categories.add-new-category\" />\n        </ModalHeader>\n        <ModalBody>\n          <Label>\n            <IntlMessages id=\"categories.name\" />\n          </Label>\n          <Input onChange={this.handleNameChange} />\n          <Label className=\"mt-4\">\n            <IntlMessages id=\"categories.description\" />\n          </Label>\n          <Input type=\"textarea\" onChange={this.handleDescriptionChange} />\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            outline\n            onClick={toggleModal}\n            className={`btn-shadow btn-multiple-state ${\n              this.state.loading ? \"show-spinner\" : \"\"\n            }`}\n          >\n            <IntlMessages id=\"genaral.cancel\" />\n          </Button>\n          <Button color=\"primary\" onClick={this.handleSubmit}>\n            <span className=\"spinner d-inline-block\">\n              <span className=\"bounce1\" />\n              <span className=\"bounce2\" />\n              <span className=\"bounce3\" />\n            </span>\n            <span className=\"label\">\n              <IntlMessages id=\"general.submit\" />\n            </span>\n          </Button>{\" \"}\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    categories: state.category.categories\n  };\n};\n\nexport default connect(mapStateToProps, {\n  createCategoryAsync\n})(AddNewModal);\n"]},"metadata":{},"sourceType":"module"}